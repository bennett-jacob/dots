#!/usr/bin/env python3
# @description - Installs the latest version of these tools

from pathlib import Path
import subprocess
import sys
import tempfile
from typing import Tuple

SOURCE_REPO = "https://github.com/bennett-jacob/dots"
CLI_SUBDIR = "cli"
DESTINATION_DIR = Path(__file__).parent
UPDATE_FAILED_MESSAGE = f"Please open an issue on GitHub for help ({SOURCE_REPO}/issues/new), or try it yourself!"


def fetch_latest(dirpath: str):
    subprocess.check_output(
        f"git clone --quiet {SOURCE_REPO} {dirpath}",
        shell=True,
        stderr=subprocess.STDOUT,
    )


def make_install(dirpath: str):
    """Run `make install` in a directory."""
    subprocess.check_output(
        "make install_quiet",
        cwd=dirpath,
        shell=True,
        stderr=subprocess.STDOUT,
    )


def get_tools_version(dirpath: str) -> Tuple[str, str]:
    git = subprocess.run(
        [
            "git",
            "log",
            "-1",
            "--pretty=%cd,%h",
            "--date=format-local:%F %R",
        ],
        cwd=dirpath,
        stdout=subprocess.PIPE,
    )
    timestamp, sha1 = git.stdout.decode("utf-8").strip().split(",")
    return timestamp, sha1


def main():
    repo_target_dir = Path(tempfile.mkdtemp())
    cli_dir = repo_target_dir.joinpath(CLI_SUBDIR) if CLI_SUBDIR else repo_target_dir
    cli_dir = str(cli_dir)

    try:
        fetch_latest(repo_target_dir)
        make_install(cli_dir)

        timestamp, version = get_tools_version(cli_dir)
        print(f"Updated tools to {version} ({timestamp})")
    except Exception as e:
        print(f"Eep, updating tools failed :( {UPDATE_FAILED_MESSAGE}")
        sys.exit(1)


if __name__ == "__main__":
    main()
