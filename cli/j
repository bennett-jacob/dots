#!/usr/bin/env python3

import os
from pathlib import Path
import sys
from typing import Dict, List, Tuple

COMMAND_DIR = Path(__file__).parent
BASENAME = Path(__file__).name
PREFIX = f"{BASENAME}-"


class Color:
    YELLOW = '\033[93m'
    RED = '\033[91m'
    RESET = '\033[0m'

    @staticmethod
    def yellow(text: str) -> str:
        return f"{Color.YELLOW}{text}{Color.RESET}"

    @staticmethod
    def red(text: str) -> str:
        return f"{Color.RED}{text}{Color.RESET}"


class MagicCli:
    def __init__(self):
        self.commands = []
        self._get_commands()

    def _get_commands(self):
        for command in COMMAND_DIR.glob(f"{PREFIX}*"):
            self.commands.append(command.name)

    def print_help(self):
        print("Magic CLI")
        print("For more information on any command, pass `--help` as a flag to that command.")
        print()
        print(f"Usage: {BASENAME} <command> [<args>]")
        print()

        if len(self.commands) == 0:
            print("Hrm, there are no commands for me to run.")
            print(f"I can run any excecutable in {COMMAND_DIR} which have filenames that start with `{PREFIX}`.")
        else:
            print("Commands:")

            subcommands = []

            for command in self.commands:
                command = str(command).lstrip(PREFIX)
                subcommands.append(command)

            subcommands.sort()
            max_subcommand_length = max(len(cmd) for cmd in subcommands)

            for subcommand in subcommands:
                description, params = self._get_meta_tags(subcommand)
                command_print = "  " + subcommand.ljust(max_subcommand_length)
                command_print += f"   {description}"
                print(command_print)

    def print_command_help(self, command: str):
        description, params = self._get_meta_tags(command)

        param_names_wrapped = [f"<{p['name']}>" for p in params]
        print(command)
        print(description)
        print()
        print(f"Usage: {BASENAME} {command} " + " ".join(param_names_wrapped))

        if len(params):
            print()
            print("Arguments:")

            max_param_name_length = max(len(param["name"]) for param in params)
            for param in params:
                param_print = "  " + param["name"].ljust(max_param_name_length)
                param_print += f"   {param['description']}"
                print(param_print)

    def _get_meta_tags(self, command: str) -> Tuple[str, List[Dict[str, str]]]:
        filepath = COMMAND_DIR.joinpath(PREFIX + command)
        description = ""
        params = []

        with open(filepath) as file_in:
            lines = [line.strip() for line in file_in]
            lines.pop(0)  # always ignore first line

            for line in lines:
                if any(tag in line for tag in ["@description", "@param"]):
                    if "@description" in line:
                        description = line.split(" - ", 1)[1].strip()
                    elif "@param" in line:
                        # params expected in this format:
                        # @param <name> - <description>
                        param_full = line.split("@param", 1)[1].strip()
                        param_name, param_description = param_full.split(" - ")
                        params.append({
                            "name": param_name.strip(),
                            "description": param_description.strip(),
                        })
                else:
                    break

        return description, params

    def execute(self, command: str, args: List[str] = []):
        executable = COMMAND_DIR.joinpath(PREFIX + command)

        if not executable.is_file():
            print(Color.red(f"`{command}` is not a valid command."))
            print("For a list of available commands, run " + Color.yellow(f"{BASENAME} --help"))
            sys.exit(1)

        args = [executable] + args  # first arg is expected to be the command
        os.execv(executable, args)


def main():
    args = sys.argv[1:]
    cli = MagicCli()
    help_flags = ["--help", "-h"]

    try:
        command = args.pop(0)

        if command in help_flags:
            cli.print_help()
        elif any(flag in args for flag in help_flags):
            cli.print_command_help(command)
        else:
            cli.execute(command, args)

    except IndexError:
        # no command was provided
        cli.print_help()


if __name__ == "__main__":
    main()
